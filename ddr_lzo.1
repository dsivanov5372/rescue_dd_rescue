.\" $Id$
.
.TH ddr_lzo 1 "2014-05-12" "Kurt Garloff" "LZO de/compression plugin for dd_rescue"
.
.SH NAME
ddr_lzo \- Data de/compression plugin for dd_rescue
.
.SH SYNOPSIS
.na
.nh
.B -L lzo[=option[:option[:...]]]
.br
or
.B -L /path/to/libddr_lzo.so[=option[:option[:...]]]
.
.SH DESCRIPTION
.SS About
LZO is an algorithm that de/compresses data. It is tuned to speed
(especially decompression speed) and trades the size of the compressed
file for it to some degree. There are variants with slow compression
(yet still very fast decompression) available though. See the algorithm
parameter below.
.PP
This plugin has been written for 
.B dd_rescue
and uses the plugin interface from it. See the
.BR dd_rescue(1)
man page for more information on
.B dd_rescue.
.
.SS Defaults and Options
The plugin uses
the lzo1x_1 algorithm by default (just like lzop does by default)
and generates adler32 checksums to allow detecting data corruption. 
The compressed files are compatible with lzop and the plugin should
handle files generated by lzop (except for archive files).
The lzo plugin choses compression or decompression mode automatically
if one of the input/output files has an [lt]zo suffix; otherwise
you may specify compress or decompress parameters on the
command line.
.br
The plugin is new as of dd_rescue 1.43. Do not yet rely on data
saved with this plugin as only backup for valuable data. Also
expect some changes to the plugin in the near future. (This will
not break the file format, as we're following lzop ....)
.br
While care has been applied to check the result of memory allocations ...,
the decompressor code has not been audited or fuzzed (yet) to ensure 
it's not  vulnerable to malicious data -- be careful when you process
data from untrusted sources.
.br
The plugin also supports the parameter benchmark; if it's specified,
it will output some information about CPU usage and resulting compression
or decompression bandwidth. (For small files, the numbers become meaningless
due to jitter and limited time resolution -- the plugin will skip the output
if the numbers are very tiny.)
.br
The parameter optimize will tell the lzo plugin to do an optimization 
pass after compression. This might speed up decompression by a few percent 
when creating compressed data with high compression levels and large block 
sizes.
.br
The lzo plugin supports a number of the (de)compression algorithms from
liblzo2. You can specify which one you want to use by passing algo=XXX,
where XXX can be lzo1x_1, lzo1x_1_15, lzo1x_999, lzo1x_1_11, lzo1x_1_12,
lzo1y_1, lzo1y_999, lzo1f_1, lzo1f_999, lzo1b_1 ... lzo1b_9, 
lzo1b_99, lzo1b_999, lzo2a_999.
Pass algo=help to get a list of available algorithms. Consult the liblzo
documentation for more information on the algorithms. Note that only the
first three are supported by lzop (it can decompress the first five though,
as they're all handled by the same decompression routine).
.br
Finally there is also a flags=XXXX parameter. This sets the flags field in
the header (default ix 0x03000003) and is used for testing only. It is not
sanity checked and you can easily set values that will break decompression
or cause the plugin to abort. 

.SS Blocksize considerations
When decompressing, the (soft) block size chosen in dd_rescue must be 
sufficient; if you chose too small blocks, the plugin will warn and exit.
.br
For compression, the chosen (soft)blocksize in dd_rescue will determine
the size of blocks to be fed to the lzo??_?_compress() routines. Larger
block sizes will typically result in slightly better compression ratios.
The default from dd_rescue (128k) however is a good choice. It is NOT
recommended to increase the block size too much -- when an lzo file gets
corrupted, at least one block will be lost; larger blocks result in larger
damage.

